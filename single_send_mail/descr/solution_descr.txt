Сналала оценим объем для текущего хранения. Почта это ASCII строка обычно с длинной менее 50 символов - значит максимальный размер ставим *5 - (255), 
а среднее не выйдет за *2 (100) символов. Несколько млн - явно менее 10 - иначе писалось бы несколько десятков, поэтому верхняя оценка 10-20 млн. 
Итого оценка размера - 10^2 * 10^7 ~ 10^9, т.е. с учетом накладных расходов - несколько гигабайт. 
Т.е. для хранения явно нужна база - собственная или встроеная в используемый инструмент - 
до 10 млн записей, без внутренней структуры и задач поиска подойдет почти что угодно из NoSQL (Redis) и из SQL вплоть до SQLite.

Между фактической отправкой письма и ответом метода, даже если он работает локально и не использует запрос на SMTP сервер по сети - проходит время
и отключение электричества в этот момент приведет к успешной отправке без ответа метода. А в случае сети достаточно временного сбоя связи  
и ответ метода не будет получен, а письмо успешно уйдет.  
Поэтому требование "отправка письма строго по одному разу" со стороны отправителя в точности не выполнимо. 
Для такого строгого условия требуется идемпотентность получателя (онлайн или позже дедупликацией - в зависимости от нагрузки).

Поэтому сначала сведем это к "строго одному ответу метода", плюс фиксация результата - даже если она происходит сразу после метода - тоже может прерваться. 
Но и это не выполнимо, из-за требования гарантированной отправки, т.к. подвисшая сеть или отключение электричества 
приводит к ситуации - почта взята в обработку и ответа нет, а может и не будет - потенциально неотправленная почта. 
Поэтому накладываем на работу метода таймаут - достаточно большой с учетом работы - *5 среднего времени срабатывания. 
В случае отсутвия ответа за этой время считаем выполнение неудачным и запускаем повторную обработку.

С учетом описанного самым логичным выбором являеться очередь с физическим хранением (persistent), отсутстием авто-ответа и возвратом в обработку по таймауту. 
В примере используется RabbitMQ (без автоподтверждения с кастомным consumer_timeout) + Linux сервис на тасках.

Установка в systemd -> 
копируем в  /opt/single_send_mail приложение, даем права на чтение work_user
копируем в  /etc/systemd/system single_send_mail.service
sudo systemctl enable single_send_mail
sudo systemctl start single_send_mail

параметры соединения пишем в queue_config.json
текст письма в message.bin

=============================================================================================================================
=============================================================================================================================
=============================================================================================================================
Так же при желании можно сделать и свою реализацию на базе прямо Thread и таблицы в базе, postgresql + pgBouncer

CREATE TABLE emails(
    id         bigserial CONSTRAINT emails_id PRIMARY KEY,  -- сквозная уникальность в нескольких базах/экземплярах не нужна - поэтому не uuid
    email      varchar(255) NOT NULL,                       -- В случае наличие проблем с размером можно позже расширить колонку   
    try_id     uuid,                                        -- идентификатор попытки
    last_proc  bigint NOT NULL DEFAULT 0                    -- Unixdate (так же можно timestamp)
);
CREATE INDEX try_proc_index on emails (last_proc desc, try_id);  -- покрывающий по поиску на обработку
CLUSTER emails_id on emails;

====== Вариант 1 - многопоточка по одному (вложенный Select в update, либо два запроса)

SELECT id FROM emails WHERE try_id is null OR last_proc < @last_proc_date limit 1

UPDATE emails SET try_id = @try_id, last_proc = EXTRACT(EPOCH FROM CURRENT_TIMESTAMP)::bigint 
WHERE id = @id and (try_id is null OR last_proc < @last_proc_date)
RETURNING id, email

// Успех обработки
DELETE FROM emails where id = @id

далее как и в примере каждый обработчик в цикле сам вытаскивает себе заявку

====== Вариант 2 - кэшируемая многопоточка

периодически опрашиваем базу на набор заявок (по времени или по истощению запаса )

with ids as (
    SELECT id FROM emails WHERE try_id is null OR last_proc < @last_proc_date limit {0}
)
UPDATE emails SET try_id = @try_id, last_proc = EXTRACT(EPOCH FROM CURRENT_TIMESTAMP)::bigint 
WHERE id in (select id from ids)  and (try_id is null OR last_proc < @last_proc_date)
RETURNING id, email, last_proc

результат вместе с датой окончания таймаута (в два раза меньше чем в базе), включаем в класс и отправляем его в ConcurrentQueue<T>, 
в обработчиках каждый в своем Thread

while (!pCancel.IsCancellationRequested) {
    if(pQueue.TryDequeue(out TEmailInfo pEmailInfo) && pEmailInfo.rProcTo > Datetime.Now){        
        ...
    } else 
       Thread.Sleap(100);
}



